Name,Description,Resumen
Abandonment of planning under pressure,"Projects make plans and then routinely abandon them when they run into schedule trouble. This would not be a problem if the plans were updated to account for the schedule difficulties. The problem arises when the plans are abandoned with no substitute, which tends to make the project slide into code-and-fix mode.",Abandonar la planificación cuando hay dificultades o presión por terminar.
Adding people to a late project,"When a project is behind, adding people can take more productivity away from existing team members than it adds through new ones. Adding people to a late project has been likened to pouring gasoline on a fire.","Agregar gente a un proyecto atrasado, saca productividad ya que necesitan que se les explique como funciona, o curva de aprendizaje de cómo trabaja el equipo/herramientas/negocio.
Para que sea efectivo agregarlos necesito que sea bajo tiempo de capacitación por experiencia u otra razón, que las tareas sean independientes/poca coordinación con otras personas y que las tareas que se den sean divisibles."
Assuming global development has a negligible impact on total effort,"Multi-site development increases communication and coordination effort between sites. The greater the differences among the sites in terms of time zones, company cultures, and national cultures, the more the total project effort will increase. Some companies naively assume that changing from single-site development to multi-site development will have a negligible impact on effort, but studies have shown that international development will typically increase effort by about 40% compared to single-site development.",Asumir que tener personas en distintos países no tiene impacto en el esfuerzo
Code-like-hell programming,"Some organizations think that fast, loose, all-as-you-go coding is a route to rapid development. If the developers are sufficiently motivated, they reason, they can overcome any obstacles. This is far from the truth. The entrepreneurial model is often a cover for the old code and-fix paradigm combined with an ambitious schedule, and that combination almost never works.",Codear tan rápido como puedas comiéndote muchos bugs o pasando cosas.
Confusing estimates with targets,"Some organizations set schedules based purely on the desirability of business targets without also creating analytically-derived cost or schedule estimates. While target setting is not bad in and of itself, some organizations actually refer to the target as the ‘estimate,’ which lends it an unwarranted and misleading authenticity as a foundation for creating plans, schedules, and commitments.",Confundir estimaciones con objetivos.
Developer goldplating,"Developers are fascinated by new technology and are sometimes anxious to try out new capabilities of their language or environment or to create their own implementation of a slick feature they saw in another product—whether or not it’s required in their product. The effort required to design, implement, test, document, and support features that are not required adds cost and lengthens the schedule.",Hacer funcionalidades que no son tan requeridas por el solo hecho de probar tecnología o cosas de la tecnología que se está usando.
Excessive multitasking,"When software developers are assigned to more than one project, they must ‘task switch’ as they change their focus from one project to another. They must get out of ‘flow’ on one project and into ‘flow’ on another. Task switching can be a significant factor—some studies have said that each task switch in software development can incur a 5-30 minute downtime as a developer works out of flow on one project and works into flow on the other.",Cambiar o tener más de un proyecto trae problemas de productividad y cuesta seguir el hilo rápido.
Feature creep,"The average project experiences about a 25-percent change in requirements over its lifetime. Such a change produces at least a 25-percent addition to the software effort and schedule, which is often unaccounted for in the project’s plans and unacknowledged in the project’s status reports.",No se contempló el 25% de porcentaje de adiciones de requerimientos/cambio de planificación en la planificación inicial por ende ante nuevos cambios se atrasó todo porque no hay tiempo contemplado desde el comienzo para eso.
Friction between developers and customers,"Friction between developers and customers can arise in several ways. Customers may feel that developers are not cooperative when they refuse to sign up for the development schedule that the customers want or when they fail to deliver on their promises. Developers may feel that customers are unreasonably insisting on unrealistic schedules or requirements changes after requirements have been baselined. There might simply be personality conflicts between the two groups. The primary effect of this friction is poor communication, and the secondary effects of poor communication include poorly understood requirements, poor user-interface design, and, in the worst case, customers’ refusing to accept the completed product.","Problemas entre los desarrolladores y los clientes. Puede ser que los clientes piensen que los devs no quieran adaptarse a los tiempos que quieren, o el dev pensar que el cliente insiste sin motivo. Esto promueve la mala comunicación y por ende, mala definición de los requerimientos, mal diseño de UI, y en el peor de los casos, el cliente rechaza el producto terminado"
Heroics,"Some project teams place a high emphasis on project heroics, thinking that the certain kinds of heroics can be beneficial. However, emphasizing heroics in any form usually does more harm than good. Sometimes there is a higher premium placed on a can-do attitudes than on steady and consistent progress and meaningful progress reporting. By elevating can-do attitudes above accurate-and-sometimes-gloomy status reporting, such project managers undercut their ability to take corrective action. They don’t even know they need to take corrective action until the damage has been done. Can-do attitudes can escalate minor setbacks into true disasters. An emphasis on heroics can encourage extreme risk taking and discourage cooperation among the many stakeholders in the software development process.",Enfatizar a los “heroics” hace daño a los proyectos. Sobre todo si nadie más puede solucionar ese problema por el motivo que sea y denota que hubo otros errores en la asignación de las tareas. El heroic es en definitiva el que viene a salvar las papas siempre
Inadequate design,A special case of shortchanging upstream activities is inadequate design. Rush projects undermine design by not allocating enough time for it and by creating a pressure-cooker environment that makes thoughtful consideration of design alternatives difficult. This results in going through several time-consuming design cycles before the system can be completed.,Partir de un mal diseño es meter a un proyecto en una olla a presión. En el medio del desarrollo se va a necesitar rever cosas que ya debieron estar resueltas antes.
Insufficient planning,"Planning can be done well, and planning can be done poorly. But some projects suffer from simply not doing enough planning at all, i.e., not prioritizing planning as an important activity.",Algunos proyectos no se planifican.
"Insufficient risk
management",Some mistakes have been made often enough to be considered classic mistakes. Other potential problems need to be identified project-by project through risk management. The most common problem with risk management is not doing any risk management at all. The second most common problem with risk management is not doing enough risk management.,No se hace manejo de riesgos para riesgos ocurrentes/classic mistakes que deben considerarse si o si. El problema es no hacer gestión de riesgos o que no sea suficiente.
"Lack of automated
source-code control","Failure to use automated source-code control exposes projects to needless risks. Without it, if two developers are working on the same part of the program, they have to coordinate their work manually and risk accidentally overwriting someone else’s work. People develop new code to out-of-date interfaces and then have to redesign their code when they discover that they were using the wrong version of the interface. Users report defects that you can’t reproduce because you have no way to recreate the build they were using.",no usar sistemas como GIT de control de versiones entonces se pueden sobreescribir o pisar cosas del mismo archivo sin control.
"Lack of effective
project sponsorship (PM)","High-level project sponsorship is necessary to support many aspects of effective development including realistic estimates, adequate resource allocation, and achievable schedules, as well as helping to clear roadblocks once the project is underway. Without an effective project sponsor, other high-level personnel in your organization can force you to accept unrealistic deadlines or make changes that undermine your project.","Sin un sponsor bien se pueden aceptar estimaciones o tiempos límites poco realistas, o aceptar cambios que traen problemas en el proyecto."
"Lack of stakeholder
buy-in","All of the major players in a software-development effort must buy into the project. That includes the executive sponsor, team leader, team members, marketing, end-users, customers, and anyone else who has a stake in it. The close cooperation that occurs only when you have complete buy-in from all stakeholders allows for precise coordination of a software development effort that is impossible to attain without good buy-in.","PM, team, marketing, usuarios, clientes. No hay coordinación ni conformidad de todos o la mayoría."
Lack of user involvement,User involvement is necessary for defining meaningful requirements. The degree of user involvement can affect how quickly or how slowly issues get resolved.,La participación del usuario es necesaria para definir requerimientos significativos. El grado de participación del usuario puede afectar la rapidez o la lentitud con la que se resuelven los problemas.
Letting a team go dark,"On some projects, management allows a team to work with little oversight and little visibility into the team’s progress. This is known as “letting a team go dark.” This practice restricts visibility into project status, and the project doesn’t receive timely warnings of impending schedule slips. Before you can keep a project on track, you have to be able to tell whether it’s on track, and letting a team go dark prevents that.","Cuando trabajan medio a oscuras, no saben el estado del proyecto, o tiempos límites, impedimentos"
"Noisy, crowded offices","About 60 percent of developers report that their work environments are neither sufficiently quiet nor sufficiently private. For many developers, this can prevent concentration and prevent achieving a state of ‘flow’ that is helpful in achieving high levels of productivity. Workers who occupy quiet, private offices tend to perform significantly better than workers who occupy noisy, crowded work bays or cubicles. If people don’t keep careful records of previous projects, they forget about the less visible tasks, but those tasks add up. Forgotten activities can add 20 to 30 percent to a development schedule.",Entornos de trabajo ruidosos y con mucha gente puede prevenit la concentración y bajar la productividad.
Omitting necesarry tasks from estimates,"If people don’t keep careful records of previous projects, they forget about the less visible tasks, but those tasks add up. Forgotten activities can add 20 to 30 percent to a development schedule.",Si no contemplas las tareas necesarias y base pero que no son tan visibles en la descripción de la tarea trae problemas de tiempo.
Outsourcing to reduce cost,"Valid reasons to outsource include accessing capabilities that you don’t have in house, diversifying your labor force, freeing up your in-house staff to focus on mission-critical or core-competency projects, adding “surge capacity” to your development staff, and supporting around-the clock development. Many organizations that have outsourced for these reasons have accomplished their objectives. However, some organizations outsource primarily to reduce development costs, and historically those initiatives have not succeeded. Usually outsourcing motivated by cost savings results in higher costs and longer schedules.",Tercerizar para reducir costo trae problemas
Overestimated savings from new tools or methods,"Organizations often assume that first-time usage of a new tool or method will reduce costs and shorten schedules. In reality, first-time use of a new tool or method tends to be subject to a learning curve, and the safest planning assumption is to assume a short-term increase in cost and schedule before the benefits of the new tool or method kick in.",Subestimar el tiempo/curva de aprendizaje de una nueva herramienta o método. Los beneficios de la nueva herramienta se ven más adelante.
Overly optimistic schedules,"The challenges faced by someone building a three-month application are quite different than the challenges faced by someone building a one-year application. Setting an overly optimistic schedule sets a project up for failure by under-scoping the project, undermining effective planning, and abbreviating critical upstream development activities such as requirements analysis and design. It also puts excessive pressure on developers, which hurts developer morale and productivity.","Subestimar el tiempo, estimar con optimismo proyectos grandes, produce mucha presión en devs, reduce productividad, se subestima la planificación y se recorta en flujos de trabajo críticos"
Planning to catch up later,"If you’re working on a project and it takes you four weeks to meet your first two-week milestone, what’s your status? You know that you’re behind schedule, but will you stay behind schedule, or will you catch up later? Project planners commonly plan to catch up later, but they rarely do. Most projects that get behind schedule stay behind schedule.","Dejar para después cosas que se deberían planificar en el momento.
La mayoría de los proyectos retrasados no vuelven a estar al día."
Politics placed over substance,"Larry Constantine reported on four teams that had four different kinds of political orientations. “Politicians” specialized in “managing up”— concentrating on relationships with their managers. “Researchers” concentrated on scouting out and gathering information. “Isolationists” kept to themselves, creating project boundaries that they kept closed to non team members. “Generalists” did a little bit of everything: they tended their relationships with their managers, performed research and scouting activities, and coordinated with other teams through the course of their normal workflow. Constantine reported that initially the political and generalist teams were both well regarded by top management. But after a year and a half, the political team was ranked dead last. Putting politics over results is fatal to software development effectiveness.",Usan políticas distintas pero nunca se establece un estándar. Se debe focalizar en resultados y no en políticas.
Premature or too frequent convergence,"Shortly before a public software release there is a push to prepare the software for release—improve the product’s performance, create final documentation, stub out functionality that’s not going to be ready for the release, perform end-to end testing including tests that can’t be automated, test the setup program, and so on. On rush projects, there is a tendency to force convergence too early. If the software isn’t close enough to a releasable state, the attempted convergence will fail, and the team will need to attempt to converge again later in the project. The extra convergence attempts waste time and prolong the schedule.",Sacar a funcionar un SW que no esté lo suficientemente maduro. Se va a necesitar arreglar muchas cosas y volver a “converger” y es pérdida de tiempo.
"Push me, pull me negotiation","One bizarre negotiating ploy occurs when a manager approves a schedule slip on a project that’s progressing slower than expected and then adds completely new tasks after the schedule change. The underlying reason for this is hard to fathom because the manager who approves the schedule slip is implicitly acknowledging that the schedule was in error. But once the schedule has been corrected, the same person takes explicit action to make it wrong again.","Quien hace la planificación y tareas a seguir sabe que están mal pero las aprueba igual sin negociar, luego se tiene que replanificar."
Requirements gold plating,Requirements gold plating is the addition of requirements or the expansion of requirements without a clear business justification. Requirements gold plating can be done by end users who want the “system to end all systems” or it can be done by developers who are sometimes more interested in complex capabilities than real users are.,Agregar funcionalidades sin “justificación” razonable por parte del cliente
Research-oriented development,"Some projects have goals that push the state of the art—algorithms, speed, memory usage, and so on. That’s fine, but when those projects also have ambitious cost or schedule goals, the combination of advancing the state of the art with a tight budget on a short schedule isn’t achievable.","Querer mejorar la performance al máximo, velocidad, buenos algoritmos, uso de memoria óptimo pero con poco tiempo (good enough)"
Shortchanged quality assurance,"Projects that are in a hurry often cut corners by eliminating design and code reviews, eliminating test planning, and performing only perfunctory testing. It is common for design reviews and code reviews to be given short shrift in order to achieve a perceived schedule advantage. This often results in the project reaching its feature-complete milestone but then still being too buggy to release.","Recortar en QA. Ante falta de tiempo se reduce diseño o reviews de código nuevo, se elimina el testeo o se reduce. Produce varios bugs en el release"
"Shortchanged
upstream activities","Projects sometimes cut out non-coding activities such as requirements, architecture, and design. Also known as “jumping into coding,” the results of this mistake are predictable. Projects that skimp on upstream activities typically have to do the same work downstream at anywhere from 10 to 100 times the cost of doing it earlier.","Recortar en tareas que no son código, como diseño, arquitectura o requerimientos. Si no analizas te trae problemas."
"Silver-bullet
syndrome","On some projects, there is an over reliance on the advertised benefits of previously unused technologies, tools, or 3rd party applications and too little information about how well they would do in the current development environment. When project teams latch onto a single new methodology or new technology and expect it to solve their cost, schedule, or quality problems, they are inevitably disappointed.",Implementar nuevas tecnologías o metodologías pensando que en corto tiempo va a funcionar y arreglar todo.
"Subcontractor
failure","Companies sometimes subcontract pieces of a project when they are too rushed to do the work in-house. (“Subcontractor” can refer either to an individual or to an outsourcing firm.) But subcontractors frequently deliver work that’s late, that’s of unacceptably low quality, or that fails to meet specifications. Risks such as unstable requirements or ill-defined interfaces can be magnified when you bring a subcontractor into the picture. If the subcontractor relationship isn’t managed carefully, the use of subcontractors can undermine a project’s goals. (Note: This question deals specifically with subcontracting part of a project—other items focus on outsourcing full projects.)","Subcontratar piezas o sistemas aparte con tu sistema in-house que trae problemas de calidad, especificaciones incorrectas, riesgos, etc."
Switching development tools in the middle of a project,"This is an old standby that hardly ever works. Sometimes it can make sense to upgrade incrementally within the same product line, from version 3 to version 3.1 or sometimes even to version 4. But the learning curve, rework, and inevitable mistakes made with a totally new tool usually cancel out any benefit when you’re in the middle of a project.",Cambiar las herramientas de trabajo o las tecnologías a la mitad de un proyecto.
Trusting the map more than the terrain,"Project teams sometimes invest more confidence in the plans they create than in the experience their project is giving them. Sometimes they will trust the delivery date written on a plan more than the delivery date implied by the project’s track record. If the project reality and the project plans disagree, the project’s reality is correct, and the plans must be wrong. The longer a project team trusts the plans rather than the project reality—i.e., trusts the map more than the terrain—the more difficulty they will have adapting their course successfully.","Si el plan está jodido, y se sigue mirando el plan con sus fechas y todo, va a ser imposible adaptarse, sobre todo si el proyecto va retrasado."
Unclear project vision,"The lack of clearly defined and communicated vision undermines the organization’s ability to make and execute project-level plans that are consistent with organization-level goals. Without a clear understanding of the vision, people draw their own conclusions about the purpose of the project and how it relates to their day-to-day work, and they make decisions that run counter to the project’s business objectives. The unclear vision contributes to changes in project direction, including detailed requirements; detailed plans that are misaligned with project priorities; and, ultimately, inability to meet schedule commitments.","Si no se tienen claros los requerimientos más adelante van a haber muchos cambios que van a complicar el desarrollo; impedirá alcanzar las fechas planificadas, etc."
Uncontrolled problem employees,"Failure to deal with problem personnel (e.g., a prima donna programmer) can threaten development effectiveness. This is a common problem and has been well-understood at least since Gerald Weinberg published Psychology of Computer Programming in 1971. Failure to take action to deal with a problem employee is the most common complaint that team members have about their leaders.",No se combate el personal problemático.
Undermined motivation,"Study after study has shown that motivation probably has a larger effect on productivity and quality than any other factor. On some projects, management can undermine morale throughout the project. Examples include giving a hokey pep talk, going on a long vacation while the team works through the holidays, and providing bonuses that work out to less than a dollar per overtime hour at the end.","La motivación juega un papel importante en la productividad, calidad y otros factores."
Unrealistic expectations,One of the most common causes of friction between developers and their customers or managers is unrealistic expectations. Often customers simply start with unrealistic expectations (which is probably just human nature). Sometimes project managers or developers ask for trouble by getting project approval based on optimistic estimates. A Standish Group survey listed realistic expectations as one of the top five factors needed to ensure the success of an in-house business-software project.,Arrancar con expectativas irreales.
Wasted time during the fuzzy front end,"The “fuzzy front end” is the time before the project starts, the time normally spent in the approval and budgeting process. It’s not uncommon for a project to spend months or years in the fuzzy front end and then to come out of the gates with an aggressive schedule.",Perder tiempo en el comienzo donde se esperan aprobaciones o definiciones de procesos.
Weak personnel,"After motivation, either the individual capabilities of the team members or their relationship as a team probably has the greatest influence on productivity. Hiring from the bottom of the barrel can threaten a development effort. On some projects, personnel selections were made with an eye toward who could be hired fastest instead of who would get the most work done over the life of the project. That practice gets the project off to a quick start but doesn’t set it up for successful completion.","Además de la motivación, la capacidad individual de los miembros del equipo es una de las variables que más influencia tiene en la productividad. Hay que pensar en quién es mejor para cada proyecto y no solo el que más rápido pueda hacer sus tareas."
Wishful thinking,Wishful thinking isn’t just optimism. It’s closing your eyes and hoping something works when you have no reasonable basis for thinking it will. Wishful thinking at the beginning of a project leads to big blowups at the end of a project. It undermines meaningful planning and can be at the root of other problems.”,No optimismo sino pensar/esperar que funcione aunque no hiciste correctamente las cosas.